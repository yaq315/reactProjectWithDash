{"ast":null,"code":"import { useContext, useRef, useInsertionEffect } from 'react';\nimport { animateValue } from '../animation/animators/MainThreadAnimation.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\nimport { useMotionValue } from './use-motion-value.mjs';\nimport { isMotionValue } from './utils/is-motion-value.mjs';\nimport { frame } from '../frameloop/frame.mjs';\nfunction toNumber(v) {\n  if (typeof v === \"number\") return v;\n  return parseFloat(v);\n}\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */\nfunction useSpring(source, config = {}) {\n  const {\n    isStatic\n  } = useContext(MotionConfigContext);\n  const activeSpringAnimation = useRef(null);\n  const value = useMotionValue(isMotionValue(source) ? toNumber(source.get()) : source);\n  const latestValue = useRef(value.get());\n  const latestSetter = useRef(() => {});\n  const startAnimation = () => {\n    stopAnimation();\n    activeSpringAnimation.current = animateValue({\n      keyframes: [value.get(), latestValue.current],\n      velocity: value.getVelocity(),\n      type: \"spring\",\n      restDelta: 0.001,\n      restSpeed: 0.01,\n      ...config,\n      onUpdate: latestSetter.current\n    });\n  };\n  const stopAnimation = () => {\n    if (activeSpringAnimation.current) {\n      activeSpringAnimation.current.stop();\n    }\n  };\n  useInsertionEffect(() => {\n    return value.attach((v, set) => {\n      /**\n       * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n       * at that level, but this will work for now\n       */\n      if (isStatic) return set(v);\n      latestValue.current = v;\n      latestSetter.current = set;\n      frame.postRender(startAnimation);\n      return value.get();\n    }, stopAnimation);\n  }, [JSON.stringify(config)]);\n  useIsomorphicLayoutEffect(() => {\n    if (isMotionValue(source)) {\n      return source.on(\"change\", v => value.set(toNumber(v)));\n    }\n  }, [value]);\n  return value;\n}\nexport { useSpring };","map":{"version":3,"names":["useContext","useRef","useInsertionEffect","animateValue","MotionConfigContext","useIsomorphicLayoutEffect","useMotionValue","isMotionValue","frame","toNumber","v","parseFloat","useSpring","source","config","isStatic","activeSpringAnimation","value","get","latestValue","latestSetter","startAnimation","stopAnimation","current","keyframes","velocity","getVelocity","type","restDelta","restSpeed","onUpdate","stop","attach","set","postRender","JSON","stringify","on"],"sources":["C:/Users/Orange/project-react/node_modules/framer-motion/dist/es/value/use-spring.mjs"],"sourcesContent":["import { useContext, useRef, useInsertionEffect } from 'react';\nimport { animateValue } from '../animation/animators/MainThreadAnimation.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\nimport { useMotionValue } from './use-motion-value.mjs';\nimport { isMotionValue } from './utils/is-motion-value.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction toNumber(v) {\n    if (typeof v === \"number\")\n        return v;\n    return parseFloat(v);\n}\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */\nfunction useSpring(source, config = {}) {\n    const { isStatic } = useContext(MotionConfigContext);\n    const activeSpringAnimation = useRef(null);\n    const value = useMotionValue(isMotionValue(source) ? toNumber(source.get()) : source);\n    const latestValue = useRef(value.get());\n    const latestSetter = useRef(() => { });\n    const startAnimation = () => {\n        stopAnimation();\n        activeSpringAnimation.current = animateValue({\n            keyframes: [value.get(), latestValue.current],\n            velocity: value.getVelocity(),\n            type: \"spring\",\n            restDelta: 0.001,\n            restSpeed: 0.01,\n            ...config,\n            onUpdate: latestSetter.current,\n        });\n    };\n    const stopAnimation = () => {\n        if (activeSpringAnimation.current) {\n            activeSpringAnimation.current.stop();\n        }\n    };\n    useInsertionEffect(() => {\n        return value.attach((v, set) => {\n            /**\n             * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n             * at that level, but this will work for now\n             */\n            if (isStatic)\n                return set(v);\n            latestValue.current = v;\n            latestSetter.current = set;\n            frame.postRender(startAnimation);\n            return value.get();\n        }, stopAnimation);\n    }, [JSON.stringify(config)]);\n    useIsomorphicLayoutEffect(() => {\n        if (isMotionValue(source)) {\n            return source.on(\"change\", (v) => value.set(toNumber(v)));\n        }\n    }, [value]);\n    return value;\n}\n\nexport { useSpring };\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,MAAM,EAAEC,kBAAkB,QAAQ,OAAO;AAC9D,SAASC,YAAY,QAAQ,gDAAgD;AAC7E,SAASC,mBAAmB,QAAQ,oCAAoC;AACxE,SAASC,yBAAyB,QAAQ,oCAAoC;AAC9E,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,SAASC,KAAK,QAAQ,wBAAwB;AAE9C,SAASC,QAAQA,CAACC,CAAC,EAAE;EACjB,IAAI,OAAOA,CAAC,KAAK,QAAQ,EACrB,OAAOA,CAAC;EACZ,OAAOC,UAAU,CAACD,CAAC,CAAC;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,SAASA,CAACC,MAAM,EAAEC,MAAM,GAAG,CAAC,CAAC,EAAE;EACpC,MAAM;IAAEC;EAAS,CAAC,GAAGf,UAAU,CAACI,mBAAmB,CAAC;EACpD,MAAMY,qBAAqB,GAAGf,MAAM,CAAC,IAAI,CAAC;EAC1C,MAAMgB,KAAK,GAAGX,cAAc,CAACC,aAAa,CAACM,MAAM,CAAC,GAAGJ,QAAQ,CAACI,MAAM,CAACK,GAAG,CAAC,CAAC,CAAC,GAAGL,MAAM,CAAC;EACrF,MAAMM,WAAW,GAAGlB,MAAM,CAACgB,KAAK,CAACC,GAAG,CAAC,CAAC,CAAC;EACvC,MAAME,YAAY,GAAGnB,MAAM,CAAC,MAAM,CAAE,CAAC,CAAC;EACtC,MAAMoB,cAAc,GAAGA,CAAA,KAAM;IACzBC,aAAa,CAAC,CAAC;IACfN,qBAAqB,CAACO,OAAO,GAAGpB,YAAY,CAAC;MACzCqB,SAAS,EAAE,CAACP,KAAK,CAACC,GAAG,CAAC,CAAC,EAAEC,WAAW,CAACI,OAAO,CAAC;MAC7CE,QAAQ,EAAER,KAAK,CAACS,WAAW,CAAC,CAAC;MAC7BC,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAE,KAAK;MAChBC,SAAS,EAAE,IAAI;MACf,GAAGf,MAAM;MACTgB,QAAQ,EAAEV,YAAY,CAACG;IAC3B,CAAC,CAAC;EACN,CAAC;EACD,MAAMD,aAAa,GAAGA,CAAA,KAAM;IACxB,IAAIN,qBAAqB,CAACO,OAAO,EAAE;MAC/BP,qBAAqB,CAACO,OAAO,CAACQ,IAAI,CAAC,CAAC;IACxC;EACJ,CAAC;EACD7B,kBAAkB,CAAC,MAAM;IACrB,OAAOe,KAAK,CAACe,MAAM,CAAC,CAACtB,CAAC,EAAEuB,GAAG,KAAK;MAC5B;AACZ;AACA;AACA;MACY,IAAIlB,QAAQ,EACR,OAAOkB,GAAG,CAACvB,CAAC,CAAC;MACjBS,WAAW,CAACI,OAAO,GAAGb,CAAC;MACvBU,YAAY,CAACG,OAAO,GAAGU,GAAG;MAC1BzB,KAAK,CAAC0B,UAAU,CAACb,cAAc,CAAC;MAChC,OAAOJ,KAAK,CAACC,GAAG,CAAC,CAAC;IACtB,CAAC,EAAEI,aAAa,CAAC;EACrB,CAAC,EAAE,CAACa,IAAI,CAACC,SAAS,CAACtB,MAAM,CAAC,CAAC,CAAC;EAC5BT,yBAAyB,CAAC,MAAM;IAC5B,IAAIE,aAAa,CAACM,MAAM,CAAC,EAAE;MACvB,OAAOA,MAAM,CAACwB,EAAE,CAAC,QAAQ,EAAG3B,CAAC,IAAKO,KAAK,CAACgB,GAAG,CAACxB,QAAQ,CAACC,CAAC,CAAC,CAAC,CAAC;IAC7D;EACJ,CAAC,EAAE,CAACO,KAAK,CAAC,CAAC;EACX,OAAOA,KAAK;AAChB;AAEA,SAASL,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}